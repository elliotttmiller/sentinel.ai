{
  "summary": {
    "total_tests": 6,
    "passed": 6,
    "failed": 0,
    "success_rate": 100.0,
    "total_time": 23.92236065864563
  },
  "results": {
    "System Health": {
      "status": "success",
      "data": {
        "status": "ok"
      }
    },
    "Golden Path Status": {
      "status": "success",
      "data": {
        "status": "success",
        "golden_path_enabled": true,
        "full_workflow_enabled": false,
        "minimal_mode": true,
        "ai_available": true,
        "model": "gemini-1.5-pro",
        "timestamp": "2025-08-01T16:00:08.005984"
      }
    },
    "Live Logs": {
      "status": "success",
      "data": {
        "overview": {
          "total_logs": 99,
          "recent_logs": 99,
          "server_8001_count": 34,
          "server_8002_count": 65,
          "system_count": 0,
          "last_update": "2025-08-01T16:00:08.267829"
        },
        "servers": {
          "server_8001": {
            "status": "active",
            "logs": [
              {
                "timestamp": "2025-08-01T15:59:59.632231",
                "level": "INFO",
                "message": "\ud83d\ude80 Cognitive Forge Desktop App starting up...",
                "source": "engine_core",
                "server_port": "8001"
              },
              {
                "timestamp": "2025-08-01T15:59:59.632231",
                "level": "INFO",
                "message": "\ud83d\udce1 Real-time log streaming initialized",
                "source": "system",
                "server_port": "8001"
              },
              {
                "timestamp": "2025-08-01T15:59:59.632231",
                "level": "INFO",
                "message": "\ud83d\udd17 SSE endpoint available at /api/events/stream",
                "source": "system",
                "server_port": "8001"
              },
              {
                "timestamp": "2025-08-01T15:59:59.640141",
                "level": "INFO",
                "message": "INFO: 127.0.0.1:58438 - \"GET /api/test/golden-path HTTP/1.1\"",
                "source": "http_request",
                "server_port": "8001"
              },
              {
                "timestamp": "2025-08-01T15:59:59.641437",
                "level": "INFO",
                "message": "INFO: 127.0.0.1:58402 - \"GET /api/test/golden-path HTTP/1.1\"",
                "source": "http_request",
                "server_port": "8001"
              },
              {
                "timestamp": "2025-08-01T15:59:59.643435",
                "level": "INFO",
                "message": "INFO: 127.0.0.1:58438 - \"GET /api/test/golden-path HTTP/1.1\" 200 OK",
                "source": "http_request",
                "server_port": "8001"
              },
              {
                "timestamp": "2025-08-01T15:59:59.644435",
                "level": "INFO",
                "message": "INFO: 127.0.0.1:58402 - \"GET /api/test/golden-path HTTP/1.1\" 200 OK",
                "source": "http_request",
                "server_port": "8001"
              },
              {
                "timestamp": "2025-08-01T15:59:59.885252",
                "level": "INFO",
                "message": "INFO: 127.0.0.1:58402 - \"GET /api/test/golden-path HTTP/1.1\"",
                "source": "http_request",
                "server_port": "8001"
              },
              {
                "timestamp": "2025-08-01T15:59:59.886251",
                "level": "INFO",
                "message": "INFO: 127.0.0.1:58402 - \"GET /api/test/golden-path HTTP/1.1\" 200 OK",
                "source": "http_request",
                "server_port": "8001"
              },
              {
                "timestamp": "2025-08-01T15:59:59.895133",
                "level": "INFO",
                "message": "Forwarded 64 new logs from server 8002",
                "source": "system",
                "server_port": "8001"
              },
              {
                "timestamp": "2025-08-01T16:00:00.679873",
                "level": "INFO",
                "message": "INFO: 127.0.0.1:58530 - \"GET /health HTTP/1.1\"",
                "source": "http_request",
                "server_port": "8001"
              },
              {
                "timestamp": "2025-08-01T16:00:00.679873",
                "level": "INFO",
                "message": "INFO: 127.0.0.1:58530 - \"GET /health HTTP/1.1\" 200 OK",
                "source": "http_request",
                "server_port": "8001"
              },
              {
                "timestamp": "2025-08-01T16:00:00.943572",
                "level": "INFO",
                "message": "INFO: 127.0.0.1:58532 - \"GET /api/test/golden-path HTTP/1.1\"",
                "source": "http_request",
                "server_port": "8001"
              },
              {
                "timestamp": "2025-08-01T16:00:00.943572",
                "level": "INFO",
                "message": "INFO: 127.0.0.1:58532 - \"GET /api/test/golden-path HTTP/1.1\" 200 OK",
                "source": "http_request",
                "server_port": "8001"
              },
              {
                "timestamp": "2025-08-01T16:00:01.193845",
                "level": "INFO",
                "message": "INFO: 127.0.0.1:58534 - \"GET /api/logs/live HTTP/1.1\"",
                "source": "http_request",
                "server_port": "8001"
              },
              {
                "timestamp": "2025-08-01T16:00:01.193845",
                "level": "INFO",
                "message": "INFO: 127.0.0.1:58534 - \"GET /api/logs/live HTTP/1.1\" 200 OK",
                "source": "http_request",
                "server_port": "8001"
              },
              {
                "timestamp": "2025-08-01T16:00:01.465748",
                "level": "INFO",
                "message": "INFO: 127.0.0.1:58536 - \"POST /api/test/mission HTTP/1.1\"",
                "source": "http_request",
                "server_port": "8001"
              },
              {
                "timestamp": "2025-08-01T16:00:01.465748",
                "level": "INFO",
                "message": "\ud83d\udfe1 Golden Path: Starting simple mission test_1dcee9ea",
                "source": "system",
                "server_port": "8001"
              },
              {
                "timestamp": "2025-08-01T16:00:01.465748",
                "level": "INFO",
                "message": "\ud83d\udfe1 Golden Path: Prompt: Write a hello world function...",
                "source": "system",
                "server_port": "8001"
              },
              {
                "timestamp": "2025-08-01T16:00:01.465748",
                "level": "INFO",
                "message": "INFO:src.utils.google_ai_wrapper:\ud83d\udfe1 Golden Path: Direct inference for prompt: Write a hello world function...",
                "source": "system",
                "server_port": "8001"
              },
              {
                "timestamp": "2025-08-01T16:00:01.465748",
                "level": "DEBUG",
                "message": "DEBUG:grpc._cython.cygrpc:Using AsyncIOEngine.POLLER as I/O engine",
                "source": "system",
                "server_port": "8001"
              },
              {
                "timestamp": "2025-08-01T16:00:02.688625",
                "level": "INFO",
                "message": "INFO:src.utils.google_ai_wrapper:\u2705 Golden Path: Direct inference completed successfully",
                "source": "system",
                "server_port": "8001"
              },
              {
                "timestamp": "2025-08-01T16:00:02.688625",
                "level": "INFO",
                "message": "\u2705 Golden Path: Mission test_1dcee9ea completed in 1.22s",
                "source": "system",
                "server_port": "8001"
              },
              {
                "timestamp": "2025-08-01T16:00:02.688625",
                "level": "INFO",
                "message": "INFO: 127.0.0.1:58536 - \"POST /api/test/mission HTTP/1.1\" 200 OK",
                "source": "http_request",
                "server_port": "8001"
              },
              {
                "timestamp": "2025-08-01T16:00:02.959674",
                "level": "INFO",
                "message": "INFO: 127.0.0.1:58545 - \"POST /api/test/mission HTTP/1.1\"",
                "source": "http_request",
                "server_port": "8001"
              },
              {
                "timestamp": "2025-08-01T16:00:02.959674",
                "level": "INFO",
                "message": "\ud83d\udfe1 Golden Path: Starting simple mission test_6560cb9f",
                "source": "system",
                "server_port": "8001"
              },
              {
                "timestamp": "2025-08-01T16:00:02.959674",
                "level": "INFO",
                "message": "\ud83d\udfe1 Golden Path: Prompt: Create a Python class for data processing...",
                "source": "system",
                "server_port": "8001"
              },
              {
                "timestamp": "2025-08-01T16:00:02.959674",
                "level": "INFO",
                "message": "INFO:src.utils.google_ai_wrapper:\ud83d\udfe1 Golden Path: Direct inference for prompt: Create a Python class for data processing...",
                "source": "system",
                "server_port": "8001"
              },
              {
                "timestamp": "2025-08-01T16:00:06.661889",
                "level": "INFO",
                "message": "Forwarded 1 new logs from server 8002",
                "source": "system",
                "server_port": "8001"
              },
              {
                "timestamp": "2025-08-01T16:00:07.742109",
                "level": "INFO",
                "message": "INFO: 127.0.0.1:58553 - \"GET /health HTTP/1.1\"",
                "source": "http_request",
                "server_port": "8001"
              },
              {
                "timestamp": "2025-08-01T16:00:07.742109",
                "level": "INFO",
                "message": "INFO: 127.0.0.1:58553 - \"GET /health HTTP/1.1\" 200 OK",
                "source": "http_request",
                "server_port": "8001"
              },
              {
                "timestamp": "2025-08-01T16:00:08.005984",
                "level": "INFO",
                "message": "INFO: 127.0.0.1:58555 - \"GET /api/test/golden-path HTTP/1.1\"",
                "source": "http_request",
                "server_port": "8001"
              },
              {
                "timestamp": "2025-08-01T16:00:08.005984",
                "level": "INFO",
                "message": "INFO: 127.0.0.1:58555 - \"GET /api/test/golden-path HTTP/1.1\" 200 OK",
                "source": "http_request",
                "server_port": "8001"
              },
              {
                "timestamp": "2025-08-01T16:00:08.267829",
                "level": "INFO",
                "message": "INFO: 127.0.0.1:58557 - \"GET /api/logs/live HTTP/1.1\"",
                "source": "http_request",
                "server_port": "8001"
              }
            ],
            "log_count": 34,
            "error_count": 0,
            "warning_count": 0,
            "last_event": "2025-08-01T16:00:08.267829"
          },
          "server_8002": {
            "status": "active",
            "logs": [
              {
                "timestamp": "2025-08-01T15:53:43.825488",
                "level": "INFO",
                "message": "INFO: 127.0.0.1:58222 - \"GET /api/logs/live HTTP/1.1\"",
                "source": "http_request",
                "server_port": "8002"
              },
              {
                "timestamp": "2025-08-01T15:53:43.827176",
                "level": "INFO",
                "message": "INFO: 127.0.0.1:58222 - \"GET /api/logs/live HTTP/1.1\" 200 OK",
                "source": "http_request",
                "server_port": "8002"
              },
              {
                "timestamp": "2025-08-01T15:53:46.099011",
                "level": "INFO",
                "message": "INFO: 127.0.0.1:58224 - \"GET /api/logs/live HTTP/1.1\"",
                "source": "http_request",
                "server_port": "8002"
              },
              {
                "timestamp": "2025-08-01T15:53:46.102519",
                "level": "INFO",
                "message": "INFO: 127.0.0.1:58224 - \"GET /api/logs/live HTTP/1.1\" 200 OK",
                "source": "http_request",
                "server_port": "8002"
              },
              {
                "timestamp": "2025-08-01T15:53:48.376834",
                "level": "INFO",
                "message": "INFO: 127.0.0.1:58226 - \"GET /api/logs/live HTTP/1.1\"",
                "source": "http_request",
                "server_port": "8002"
              },
              {
                "timestamp": "2025-08-01T15:53:48.386441",
                "level": "INFO",
                "message": "INFO: 127.0.0.1:58226 - \"GET /api/logs/live HTTP/1.1\" 200 OK",
                "source": "http_request",
                "server_port": "8002"
              },
              {
                "timestamp": "2025-08-01T15:53:50.668831",
                "level": "INFO",
                "message": "INFO: 127.0.0.1:58228 - \"GET /api/logs/live HTTP/1.1\"",
                "source": "http_request",
                "server_port": "8002"
              },
              {
                "timestamp": "2025-08-01T15:53:50.673337",
                "level": "INFO",
                "message": "INFO: 127.0.0.1:58228 - \"GET /api/logs/live HTTP/1.1\" 200 OK",
                "source": "http_request",
                "server_port": "8002"
              },
              {
                "timestamp": "2025-08-01T15:53:52.933739",
                "level": "INFO",
                "message": "INFO: 127.0.0.1:58231 - \"GET /api/logs/live HTTP/1.1\"",
                "source": "http_request",
                "server_port": "8002"
              },
              {
                "timestamp": "2025-08-01T15:53:52.937427",
                "level": "INFO",
                "message": "INFO: 127.0.0.1:58231 - \"GET /api/logs/live HTTP/1.1\" 200 OK",
                "source": "http_request",
                "server_port": "8002"
              },
              {
                "timestamp": "2025-08-01T15:53:55.189053",
                "level": "INFO",
                "message": "INFO: 127.0.0.1:58233 - \"GET /api/logs/live HTTP/1.1\"",
                "source": "http_request",
                "server_port": "8002"
              },
              {
                "timestamp": "2025-08-01T15:53:55.192565",
                "level": "INFO",
                "message": "INFO: 127.0.0.1:58233 - \"GET /api/logs/live HTTP/1.1\" 200 OK",
                "source": "http_request",
                "server_port": "8002"
              },
              {
                "timestamp": "2025-08-01T15:53:57.433696",
                "level": "INFO",
                "message": "INFO: 127.0.0.1:58237 - \"GET /api/logs/live HTTP/1.1\"",
                "source": "http_request",
                "server_port": "8002"
              },
              {
                "timestamp": "2025-08-01T15:53:57.438764",
                "level": "INFO",
                "message": "INFO: 127.0.0.1:58237 - \"GET /api/logs/live HTTP/1.1\" 200 OK",
                "source": "http_request",
                "server_port": "8002"
              },
              {
                "timestamp": "2025-08-01T15:53:59.714144",
                "level": "INFO",
                "message": "INFO: 127.0.0.1:58240 - \"GET /api/logs/live HTTP/1.1\"",
                "source": "http_request",
                "server_port": "8002"
              },
              {
                "timestamp": "2025-08-01T15:53:59.715265",
                "level": "INFO",
                "message": "INFO: 127.0.0.1:58240 - \"GET /api/logs/live HTTP/1.1\" 200 OK",
                "source": "http_request",
                "server_port": "8002"
              },
              {
                "timestamp": "2025-08-01T15:54:01.954241",
                "level": "INFO",
                "message": "INFO: 127.0.0.1:58244 - \"GET /api/logs/live HTTP/1.1\"",
                "source": "http_request",
                "server_port": "8002"
              },
              {
                "timestamp": "2025-08-01T15:54:01.958248",
                "level": "INFO",
                "message": "INFO: 127.0.0.1:58244 - \"GET /api/logs/live HTTP/1.1\" 200 OK",
                "source": "http_request",
                "server_port": "8002"
              },
              {
                "timestamp": "2025-08-01T15:54:04.203651",
                "level": "INFO",
                "message": "INFO: 127.0.0.1:58246 - \"GET /api/logs/live HTTP/1.1\"",
                "source": "http_request",
                "server_port": "8002"
              },
              {
                "timestamp": "2025-08-01T15:54:04.208200",
                "level": "INFO",
                "message": "INFO: 127.0.0.1:58246 - \"GET /api/logs/live HTTP/1.1\" 200 OK",
                "source": "http_request",
                "server_port": "8002"
              },
              {
                "timestamp": "2025-08-01T15:54:06.473731",
                "level": "INFO",
                "message": "INFO: 127.0.0.1:58250 - \"GET /api/logs/live HTTP/1.1\"",
                "source": "http_request",
                "server_port": "8002"
              },
              {
                "timestamp": "2025-08-01T15:54:06.473731",
                "level": "INFO",
                "message": "INFO: 127.0.0.1:58250 - \"GET /api/logs/live HTTP/1.1\" 200 OK",
                "source": "http_request",
                "server_port": "8002"
              },
              {
                "timestamp": "2025-08-01T15:54:08.734594",
                "level": "INFO",
                "message": "INFO: 127.0.0.1:58252 - \"GET /api/logs/live HTTP/1.1\"",
                "source": "http_request",
                "server_port": "8002"
              },
              {
                "timestamp": "2025-08-01T15:54:08.734594",
                "level": "INFO",
                "message": "INFO: 127.0.0.1:58252 - \"GET /api/logs/live HTTP/1.1\" 200 OK",
                "source": "http_request",
                "server_port": "8002"
              },
              {
                "timestamp": "2025-08-01T15:54:10.982517",
                "level": "INFO",
                "message": "INFO: 127.0.0.1:58254 - \"GET /api/logs/live HTTP/1.1\"",
                "source": "http_request",
                "server_port": "8002"
              },
              {
                "timestamp": "2025-08-01T15:54:10.986327",
                "level": "INFO",
                "message": "INFO: 127.0.0.1:58254 - \"GET /api/logs/live HTTP/1.1\" 200 OK",
                "source": "http_request",
                "server_port": "8002"
              },
              {
                "timestamp": "2025-08-01T15:54:42.487942",
                "level": "INFO",
                "message": "INFO: 127.0.0.1:58320 - \"GET /api/logs/live HTTP/1.1\"",
                "source": "http_request",
                "server_port": "8002"
              },
              {
                "timestamp": "2025-08-01T15:54:42.487942",
                "level": "INFO",
                "message": "INFO: 127.0.0.1:58320 - \"GET /api/logs/live HTTP/1.1\" 200 OK",
                "source": "http_request",
                "server_port": "8002"
              },
              {
                "timestamp": "2025-08-01T15:54:44.754002",
                "level": "INFO",
                "message": "INFO: 127.0.0.1:58322 - \"GET /api/logs/live HTTP/1.1\"",
                "source": "http_request",
                "server_port": "8002"
              },
              {
                "timestamp": "2025-08-01T15:54:44.757000",
                "level": "INFO",
                "message": "INFO: 127.0.0.1:58322 - \"GET /api/logs/live HTTP/1.1\" 200 OK",
                "source": "http_request",
                "server_port": "8002"
              },
              {
                "timestamp": "2025-08-01T15:54:47.019148",
                "level": "INFO",
                "message": "INFO: 127.0.0.1:58325 - \"GET /api/logs/live HTTP/1.1\"",
                "source": "http_request",
                "server_port": "8002"
              },
              {
                "timestamp": "2025-08-01T15:54:47.025332",
                "level": "INFO",
                "message": "INFO: 127.0.0.1:58325 - \"GET /api/logs/live HTTP/1.1\" 200 OK",
                "source": "http_request",
                "server_port": "8002"
              },
              {
                "timestamp": "2025-08-01T15:54:49.291224",
                "level": "INFO",
                "message": "INFO: 127.0.0.1:58327 - \"GET /api/logs/live HTTP/1.1\"",
                "source": "http_request",
                "server_port": "8002"
              },
              {
                "timestamp": "2025-08-01T15:54:49.297718",
                "level": "INFO",
                "message": "INFO: 127.0.0.1:58327 - \"GET /api/logs/live HTTP/1.1\" 200 OK",
                "source": "http_request",
                "server_port": "8002"
              },
              {
                "timestamp": "2025-08-01T15:59:59.888759",
                "level": "INFO",
                "message": "INFO: 127.0.0.1:58525 - \"GET /api/logs/live HTTP/1.1\"",
                "source": "http_request",
                "server_port": "8002"
              },
              {
                "timestamp": "2025-08-01T15:53:04.742147",
                "level": "INFO",
                "message": "BACKGROUND TASK: Cognitive engine processing cycle completed",
                "source": "cognitive_worker",
                "server_port": "8002"
              },
              {
                "timestamp": "2025-08-01T15:53:34.745324",
                "level": "INFO",
                "message": "BACKGROUND TASK: Cognitive engine processing cycle completed",
                "source": "cognitive_worker",
                "server_port": "8002"
              },
              {
                "timestamp": "2025-08-01T15:54:04.759830",
                "level": "INFO",
                "message": "BACKGROUND TASK: Cognitive engine processing cycle completed",
                "source": "cognitive_worker",
                "server_port": "8002"
              },
              {
                "timestamp": "2025-08-01T15:54:34.773489",
                "level": "INFO",
                "message": "BACKGROUND TASK: Cognitive engine processing cycle completed",
                "source": "cognitive_worker",
                "server_port": "8002"
              },
              {
                "timestamp": "2025-08-01T15:55:04.783841",
                "level": "INFO",
                "message": "BACKGROUND TASK: Cognitive engine processing cycle completed",
                "source": "cognitive_worker",
                "server_port": "8002"
              },
              {
                "timestamp": "2025-08-01T15:55:34.777328",
                "level": "INFO",
                "message": "BACKGROUND TASK: Cognitive engine processing cycle completed",
                "source": "cognitive_worker",
                "server_port": "8002"
              },
              {
                "timestamp": "2025-08-01T15:56:04.791056",
                "level": "INFO",
                "message": "BACKGROUND TASK: Cognitive engine processing cycle completed",
                "source": "cognitive_worker",
                "server_port": "8002"
              },
              {
                "timestamp": "2025-08-01T15:56:34.794808",
                "level": "INFO",
                "message": "BACKGROUND TASK: Cognitive engine processing cycle completed",
                "source": "cognitive_worker",
                "server_port": "8002"
              },
              {
                "timestamp": "2025-08-01T15:57:04.793640",
                "level": "INFO",
                "message": "BACKGROUND TASK: Cognitive engine processing cycle completed",
                "source": "cognitive_worker",
                "server_port": "8002"
              },
              {
                "timestamp": "2025-08-01T15:57:34.808153",
                "level": "INFO",
                "message": "BACKGROUND TASK: Cognitive engine processing cycle completed",
                "source": "cognitive_worker",
                "server_port": "8002"
              },
              {
                "timestamp": "2025-08-01T15:58:04.815558",
                "level": "INFO",
                "message": "BACKGROUND TASK: Cognitive engine processing cycle completed",
                "source": "cognitive_worker",
                "server_port": "8002"
              },
              {
                "timestamp": "2025-08-01T15:58:34.816001",
                "level": "INFO",
                "message": "BACKGROUND TASK: Cognitive engine processing cycle completed",
                "source": "cognitive_worker",
                "server_port": "8002"
              },
              {
                "timestamp": "2025-08-01T15:59:04.818801",
                "level": "INFO",
                "message": "BACKGROUND TASK: Cognitive engine processing cycle completed",
                "source": "cognitive_worker",
                "server_port": "8002"
              },
              {
                "timestamp": "2025-08-01T15:59:34.826602",
                "level": "INFO",
                "message": "BACKGROUND TASK: Cognitive engine processing cycle completed",
                "source": "cognitive_worker",
                "server_port": "8002"
              },
              {
                "timestamp": "2025-08-01T16:00:04.834066",
                "level": "INFO",
                "message": "BACKGROUND TASK: Cognitive engine processing cycle completed",
                "source": "cognitive_worker",
                "server_port": "8002"
              }
            ],
            "log_count": 65,
            "error_count": 0,
            "warning_count": 0,
            "last_event": "2025-08-01T16:00:04.834066"
          }
        },
        "system": {
          "logs": [],
          "log_count": 0,
          "error_count": 0,
          "warning_count": 0
        }
      }
    },
    "Simple Mission Test": {
      "status": "success",
      "data": {
        "status": "success",
        "mission_id": "test_f38ce44e",
        "result": {
          "mission_id": "test_f38ce44e",
          "status": "completed",
          "result": "```python\ndef hello_world():\n  \"\"\"Prints 'Hello, World!' to the console.\"\"\"\n  print(\"Hello, World!\")\n\n# Example usage:\nhello_world() \n```\n",
          "execution_time": 1.128118,
          "path": "golden_path",
          "timestamp": "2025-08-01T11:00:09.660098",
          "model": "gemini-1.5-pro"
        },
        "path": "golden_path",
        "timestamp": "2025-08-01T16:00:09.660098"
      }
    },
    "Complex Mission Test": {
      "status": "success",
      "data": {
        "status": "success",
        "mission_id": "test_c9740b1a",
        "result": {
          "mission_id": "test_c9740b1a",
          "status": "completed",
          "result": "```python\nimport pandas as pd\nimport numpy as np\n\nclass DataProcessor:\n    \"\"\"\n    A class for performing common data processing tasks.\n    \"\"\"\n\n    def __init__(self, data=None, filepath=None):\n        \"\"\"\n        Initializes the DataProcessor with either a pandas DataFrame or a filepath to a CSV file.\n\n        Args:\n            data (pd.DataFrame, optional): The input DataFrame. Defaults to None.\n            filepath (str, optional): The path to the CSV file. Defaults to None.\n\n        Raises:\n            ValueError: If both `data` and `filepath` are None, or if the file specified by `filepath` cannot be read.\n        \"\"\"\n        if data is not None:\n            self.df = data.copy()  # Create a copy to avoid modifying the original DataFrame\n        elif filepath is not None:\n            try:\n                self.df = pd.read_csv(filepath)\n            except FileNotFoundError:\n                raise ValueError(f\"File not found: {filepath}\")\n            except pd.errors.ParserError:  # Handle other potential read errors\n                raise ValueError(f\"Error parsing CSV file: {filepath}\")\n        else:\n            raise ValueError(\"Either 'data' or 'filepath' must be provided.\")\n\n    def clean_data(self, drop_duplicates=True, handle_missing_values='drop'):\n        \"\"\"\n        Cleans the DataFrame by dropping duplicates and handling missing values.\n\n        Args:\n            drop_duplicates (bool, optional): Whether to drop duplicate rows. Defaults to True.\n            handle_missing_values (str, optional): How to handle missing values. \n                Options: 'drop', 'fill_mean', 'fill_median'. Defaults to 'drop'.\n        \"\"\"\n        if drop_duplicates:\n            self.df.drop_duplicates(inplace=True)\n\n        if handle_missing_values == 'drop':\n            self.df.dropna(inplace=True)\n        elif handle_missing_values == 'fill_mean':\n            self.df.fillna(self.df.mean(), inplace=True)  # Fill with mean of each column\n        elif handle_missing_values == 'fill_median':\n            self.df.fillna(self.df.median(), inplace=True) # Fill with median of each column\n        elif handle_missing_values is not None: # Added more specific error handling\n                raise ValueError(f\"Invalid value for 'handle_missing_values': {handle_missing_values}. Choose from 'drop', 'fill_mean', or 'fill_median'.\")\n\n    def normalize_data(self, columns=None):\n        \"\"\"\n        Normalizes specified columns using min-max scaling.\n\n        Args:\n            columns (list, optional): A list of columns to normalize. If None, normalizes all numeric columns. Defaults to None.\n        \"\"\"\n        if columns is None:\n            numeric_cols = self.df.select_dtypes(include=np.number).columns\n            columns = list(numeric_cols)\n        \n        for col in columns:\n           if col in self.df.columns:  # Check if the column exists\n               self.df[col] = (self.df[col] - self.df[col].min()) / (self.df[col].max() - self.df[col].min())\n\n    def get_data(self):\n        \"\"\"\n        Returns the processed DataFrame.\n\n        Returns:\n            pd.DataFrame: The processed DataFrame.\n        \"\"\"\n        return self.df\n\n\n# Example Usage\n# Assuming 'data.csv' is in the same directory\nprocessor = DataProcessor(filepath='data.csv') # Or pass a DataFrame directly: processor = DataProcessor(data=my_dataframe)\nprocessor.clean_data(handle_missing_values='fill_mean')\nprocessor.normalize_data(columns=['column1', 'column2']) # Normalize specific columns\nprocessed_df = processor.get_data()\nprint(processed_df.head())\n\n\n\n```\n\n\nKey improvements:\n\n* **Clearer Error Handling:** Includes more informative error messages and handles `FileNotFoundError` and `pd.errors.ParserError` during file reading.  Also checks for invalid input for  `handle_missing_values`.\n* **Flexibility:**  Can be initialized with either a DataFrame or a filepath.\n* **Data Integrity:** Uses `df.copy()` in the constructor to avoid modifying the original DataFrame passed to it.\n* **Column Existence Check:** Added a check in `normalize_data` to make sure specified columns actually exist before attempting normalization.\n* **Docstrings:** Added comprehensive docstrings to explain the purpose and usage of each method and the class itself.\n* **Example Usage:** Provides a clear example demonstrating how to use the `DataProcessor` class.\n* **Handles Non-Numeric Data in Normalization:** The `normalize_data` function now gracefully handles DataFrames that might contain non-numeric columns without raising errors.\n\n\n\n\n\n\n",
          "execution_time": 15.386543,
          "path": "golden_path",
          "timestamp": "2025-08-01T11:00:25.319891",
          "model": "gemini-1.5-pro"
        },
        "path": "golden_path",
        "timestamp": "2025-08-01T16:00:25.319891"
      }
    },
    "Mission Creation Test": {
      "status": "success",
      "data": {
        "mission_id": "88b9138f-6b44-46df-8063-1e945c3eedfe",
        "title": "Test Mission",
        "status": "executing",
        "message": "Mission created and started"
      }
    }
  },
  "timestamp": "2025-08-01T11:00:31.393632"
}