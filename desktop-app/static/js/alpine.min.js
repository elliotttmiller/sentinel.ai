// Minimal Alpine.js implementation for basic x-data and x-show functionality
// This is a fallback when CDN is not available

(function() {
    'use strict';
    
    // Simple Alpine.js-like functionality
    window.Alpine = {
        data: function(name, callback) {
            // Store data callbacks
            if (!window.Alpine._dataCallbacks) {
                window.Alpine._dataCallbacks = {};
            }
            window.Alpine._dataCallbacks[name] = callback;
        },
        
        start: function() {
            // Initialize Alpine-like behavior
            this.initializeElements();
        },
        
        initializeElements: function() {
            // Find all elements with x-data
            const elements = document.querySelectorAll('[x-data]');
            elements.forEach(el => {
                const dataExpression = el.getAttribute('x-data');
                if (dataExpression) {
                    try {
                        // Evaluate the data expression
                        const dataFunction = new Function('return ' + dataExpression);
                        const data = dataFunction();
                        
                        // Store data on element
                        el._alpineData = data;
                        
                        // Initialize x-show elements
                        this.initializeShows(el);
                        
                        // Call x-init if it exists
                        const initExpression = el.getAttribute('x-init');
                        if (initExpression) {
                            try {
                                const initFunction = new Function('return ' + initExpression);
                                initFunction.call(data);
                            } catch (e) {
                                console.warn('x-init error:', e);
                            }
                        }
                        
                    } catch (e) {
                        console.error('Alpine data error:', e);
                    }
                }
            });
        },
        
        initializeShows: function(container) {
            // Handle x-show elements
            const showElements = container.querySelectorAll('[x-show]');
            showElements.forEach(el => {
                const showExpression = el.getAttribute('x-show');
                this.updateShow(el, showExpression, container._alpineData);
            });
        },
        
        updateShow: function(element, expression, data) {
            try {
                // Create a function to evaluate the expression with data context
                const func = new Function('data', `with(data) { return ${expression}; }`);
                const show = func(data);
                
                if (show) {
                    element.style.display = element._originalDisplay || '';
                } else {
                    if (!element._originalDisplay) {
                        element._originalDisplay = element.style.display || 'block';
                    }
                    element.style.display = 'none';
                }
            } catch (e) {
                console.warn('x-show error:', e);
            }
        }
    };
    
    // Auto-start when DOM is ready
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', () => Alpine.start());
    } else {
        Alpine.start();
    }
    
})();