CopilotKit Direct to LLM
Bring your LLMs to your users with CopilotKit.

CopilotKit and LLMs together provide everything you need to build rich, interactive, AI-powered applications. With direct LLM integration, you can create copilots that are not just smart, but truly collaborative. This means that your AI application can:

Respond quickly and often to user input
Allow the user to steer as needed
Take action on the user's behalf, driving the app, or other tools through MCP
Proverbs Example app, demonstrating some of the key features of a CopilotKit app with direct LLM integration.*

Generative UI
Generative UI lets you render your agent's state, progress, outputs, and tool calls with custom UI components in real-time. It bridges the gap between AI agents and user interfaces.

Haiku Generator - CopilotKit app with direct LLM integration. Live Demo GitHub

Human in the Loop
Empower users to guide agents at key checkpoints. Human-in-the-loop lets you combine the best of AI and human judgment.

AI Travel App - CopilotKit app with direct LLM integration using HITL to get user feedback. Live Demo GitHub

Shared State
Keep your agent and your app in sync. Shared state means your agent can see everything in your app, and your app can react to your agent.

Recipe Example App - CopilotKit app sharing state with direct LLM integration. Live Demo GitHub

Architecture
CopilotKit can connect directly to the LLM of your choice (e.g., OpenAI GPT-4o)

There is no intermediate orchestration layer.

CopilotKit's Standard Agent marries your App to the LLM, by:

Capturing user inputs and context from the UI.
Sending them as prompts to the LLM.
Streaming responses back to the UI in real time (via AGUI protocol).
Optionally enriching with custom instructions using CopilotKitâ€™s "Customize AI Behavior" features.
CopilotKit Infrastructure Diagram
Live Demo - Direct to LLM x CopilotKit in Action
In this example, we've built an AI travel assistant that can help you plan your next trip. It uses direct LLM integration to coordinate chat and task execution.

================================================================================================================================================================Quickstart
Get started with CopilotKit in under 5 minutes.

Using the CLI
If you have a NextJS application, you can use our CLI to automatically bootstrap your application for use with CopilotKit.


npx copilotkit@latest init
Starting from scratch?
Code-along
If you don't have a NextJS application or just want to code-along, you can follow the steps below.

Copilot Cloud (Recommended)

Use our hosted backend endpoint to get started quickly.

Self-hosting

Learn to host CopilotKit's runtime yourself with your own backend.

Install CopilotKit
First, install the latest packages for CopilotKit.

npm
npm install @copilotkit/react-ui @copilotkit/react-core
Get a Copilot Cloud Public API Key
Navigate to Copilot Cloud and follow the instructions to get a public API key - it's free!
 
export default function RootLayout({ children }: { children: ReactNode }) {
  return (
    <html lang="en">
      <body>
        {/* Use the public api key you got from Copilot Cloud  */} // [!code highlight:4]
        <CopilotKit publicApiKey="<your-copilot-cloud-public-api-key>"> 
          {children}
        </CopilotKit>
      </body>
    </html>
  );
}
Choose a Copilot UI
First, import the default styles in your root component (typically layout.tsx) :


import "@copilotkit/react-ui/styles.css";
Copilot UI ships with a number of built-in UI patterns, choose whichever one you like.

CopilotChat
CopilotSidebar
CopilotPopup
Headless UI
CopilotChat is a flexible chat interface component that can be placed anywhere in your app and can be resized as you desire.

Popup Example

import { CopilotChat } from "@copilotkit/react-ui";
 
export function YourComponent() {
  return (
    <CopilotChat
      instructions={"You are assisting the user as best as you can. Answer in the best way possible given the data you have."}
      labels={{
        title: "Your Assistant",
        initial: "Hi! ðŸ‘‹ How can I assist you today?",
      }}
    />
  );
}

================================================================================================================================================================

Self Hosting (Copilot Runtime)
Learn how to self-host the Copilot Runtime.

The Copilot Runtime is the back-end component of CopilotKit, handling the communication with LLM, message history, state and more.

You may choose to self-host the Copilot Runtime, or use Copilot Cloud (recommended).

LLM
Copilot Runtime
@copilotkit/react-core
LLM
Copilot Runtime
@copilotkit/react-core
"Hey, my name is Uli."
Request
Response
"Hello Uli, how can I help you?"
Integration
Step 1: Create an Endpoint
Choose your provider:

Google Generative AI (Gemini) logoGoogle Generative AI (Gemini)
If you are planning to use a single LangGraph agent in agent-lock mode as your agentic backend, your LLM adapter will only be used for peripherals such as suggestions, etc.

If you are not sure yet, simply ignore this note.

Add your API key
Next, add your API key to your .env file in the root of your project (unless you prefer to provide it directly to the client):

.env

GOOGLE_API_KEY=your_api_key_here
Setup the Runtime Endpoint
Serverless Function Timeouts
When deploying to serverless platforms (Vercel, AWS Lambda, etc.), be aware that default function timeouts may be too short for CopilotKit's streaming responses:

Vercel defaults: 10s (Hobby), 15s (Pro)
AWS Lambda default: 3s
Solution options:

Increase function timeout:

// vercel.json
{
  "functions": {
    "api/copilotkit/**/*": {
      "maxDuration": 60
    }
  }
}
Use Copilot Cloud to avoid timeout issues entirely

Next.js App Router

Next.js Pages Router

Node.js Express

Node.js HTTP

NestJS
Create a new route to handle the /api/copilotkit endpoint.

app/api/copilotkit/route.ts

import {
  CopilotRuntime,
  GoogleGenerativeAIAdapter,
  copilotRuntimeNextJSAppRouterEndpoint,
} from '@copilotkit/runtime';
import { NextRequest } from 'next/server';
 
const serviceAdapter = new GoogleGenerativeAIAdapter({ model: <optional model choice> });
const runtime = new CopilotRuntime();
 
export const POST = async (req: NextRequest) => {
  const { handleRequest } = copilotRuntimeNextJSAppRouterEndpoint({
    runtime,
    serviceAdapter,
    endpoint: '/api/copilotkit',
  });
 
  return handleRequest(req);
};
Your Copilot Runtime endpoint should be available at http://localhost:3000/api/copilotkit.

Step 2: Get Your Copilot Cloud API Key (Optional but Recommended)
While self-hosting, you can still leverage Copilot Cloud's enhanced features for production-ready deployments.

Go to Copilot Cloud and sign up for free
Get your API key from the dashboard
Add it to your environment variables:
.env

COPILOT_CLOUD_PUBLIC_API_KEY=your_api_key_here
Why add this?

Free tier available - Your requests will NOT be logged
Production-ready features - Enhanced error handling and observability
Developer console - Better debugging and monitoring (coming soon)
Error observability - Track and debug issues in production
This enables CopilotKit platform features while still using your self-hosted runtime.

Step 3: Configure the <CopilotKit> Provider
layout.tsx

import "./globals.css";
import { ReactNode } from "react";
import { CopilotKit } from "@copilotkit/react-core"; 
 
export default function RootLayout({ children }: { children: ReactNode }) {
  return (
    <html lang="en">
      <body> 
        {/* Make sure to use the URL you configured in the previous step  */} // [!code highlight:4]
        <CopilotKit runtimeUrl="/api/copilotkit"> 
          {children}
        </CopilotKit>
      </body>
    </html>
  );
}

================================================================================================================================================================

CopilotRuntime
Copilot Runtime is the back-end component of CopilotKit, enabling interaction with LLMs.

This is the reference for the CopilotRuntime class. For more information and example code snippets, please see Concept: Copilot Runtime.

Usage

import { CopilotRuntime } from "@copilotkit/runtime";
 
const copilotKit = new CopilotRuntime();
Constructor Parameters
middleware
Middleware
Middleware to be used by the runtime.


onBeforeRequest: (options: {
  threadId?: string;
  runId?: string;
  inputMessages: Message[];
  properties: any;
}) => void | Promise<void>;

onAfterRequest: (options: {
  threadId?: string;
  runId?: string;
  inputMessages: Message[];
  outputMessages: Message[];
  properties: any;
}) => void | Promise<void>;
actions
ActionsConfiguration<T>
A list of server side actions that can be executed. Will be ignored when remoteActions are set

remoteActions
CopilotKitEndpoint[]
Deprecated: Use remoteEndpoints.

remoteEndpoints
EndpointDefinition[]
A list of remote actions that can be executed.

langserve
RemoteChainParameters[]
An array of LangServer URLs.

agents
Record<string, AbstractAgent>
A map of agent names to AGUI agents. Example agent config:


import { AbstractAgent } from "@ag-ui/client";
// ...
agents: {
  "support": new CustomerSupportAgent(),
  "technical": new TechnicalAgent()
}
delegateAgentProcessingToServiceAdapter
boolean
Delegates agent state processing to the service adapter.

When enabled, individual agent state requests will not be processed by the agent itself. Instead, all processing will be handled by the service adapter.

observability_c
CopilotObservabilityConfig
Configuration for LLM request/response logging. Requires publicApiKey from CopilotKit component to be set:


<CopilotKit publicApiKey="ck_pub_..." />
Example logging config:


logging: {
  enabled: true, // Enable or disable logging
  progressive: true, // Set to false for buffered logging
  logger: {
    logRequest: (data) => langfuse.trace({ name: "LLM Request", input: data }),
    logResponse: (data) => langfuse.trace({ name: "LLM Response", output: data }),
    logError: (errorData) => langfuse.trace({ name: "LLM Error", metadata: errorData }),
  },
}
mcpServers
MCPEndpointConfig[]
Configuration for connecting to Model Context Protocol (MCP) servers. Allows fetching and using tools defined on external MCP-compliant servers. Requires providing the createMCPClient function during instantiation. @experimental

createMCPClient
CreateMCPClientFunction
A function that creates an MCP client instance for a given endpoint configuration. This function is responsible for using the appropriate MCP client library (e.g., @copilotkit/runtime, ai) to establish a connection. Required if mcpServers is provided.


import { experimental_createMCPClient } from "ai"; // Import from vercel ai library
// ...
const runtime = new CopilotRuntime({
  mcpServers: [{ endpoint: "..." }],
  async createMCPClient(config) {
    return await experimental_createMCPClient({
      transport: {
        type: "sse",
        url: config.endpoint,
        headers: config.apiKey
          ? { Authorization: `Bearer ${config.apiKey}` }
          : undefined,
      },
    });
  }
});
onError
CopilotErrorHandler
Optional error handler for comprehensive debugging and observability.

Requires publicApiKey: Error handling only works when requests include a valid publicApiKey. This is a premium Copilot Cloud feature.

@param errorEvent - Structured error event with rich debugging context

@example


const runtime = new CopilotRuntime({
  onError: (errorEvent) => {
    debugDashboard.capture(errorEvent);
  }
});
processRuntimeRequest
request: CopilotRuntimeRequest
request
CopilotRuntimeRequest
required
getAllAgents
graphqlContext: GraphQLContext
graphqlContext
GraphQLContext
required
discoverAgentsFromEndpoints
graphqlContext: GraphQLContext
graphqlContext
GraphQLContext
required
loadAgentState
graphqlContext: GraphQLContext, threadId: string, agentName: string
graphqlContext
GraphQLContext
required
threadId
string
required
agentName
string
required
errorGraphQLError
error: { message: string; code: string; type: string }, context: { operation: string; cloudConfigPresent: boolean; guardrailsEnabled: boolean; }
Public method to handle GraphQL validation errors

error
{ message: string; code: string; type: string }
required
context
{ operation: string; cloudConfigPresent: boolean; guardrailsEnabled: boolean; }
required

================================================================================================================================================================

Prebuilt Copilot UI
First, import the default styles in your root component (typically layout.tsx) :


import "@copilotkit/react-ui/styles.css";
Copilot UI ships with a number of built-in UI patterns, choose whichever one you like.

CopilotChat
CopilotSidebar
CopilotPopup
Headless UI
CopilotChat is a flexible chat interface component that can be placed anywhere in your app and can be resized as you desire.

Popup Example

import { CopilotChat } from "@copilotkit/react-ui";
 
export function YourComponent() {
  return (
    <CopilotChat
      instructions={"You are assisting the user as best as you can. Answer in the best way possible given the data you have."}
      labels={{
        title: "Your Assistant",
        initial: "Hi! ðŸ‘‹ How can I assist you today?",
      }}
    />
  );
}

================================================================================================================================================================

Styling Copilot UI
CopilotKit has a variety of ways to customize colors and structures of the Copilot UI components.

CSS Variables
Custom CSS
Custom Icons
Custom Labels
If you want to customize the style as well as the functionality of the Copilot UI, you can also try the following:

Custom Sub-Components
Fully Headless UI
CSS Variables (Easiest)
The easiest way to change the colors using in the Copilot UI components is to override CopilotKit CSS variables.

Hover over the interactive UI elements below to see the available CSS variables.

CopilotKit

Hi you! ðŸ‘‹ I can help you create a presentation on any topic.
Hello CopilotKit!
Type a message...


Powered by CopilotKit

Once you've found the right variable, you can import CopilotKitCSSProperties and simply wrap CopilotKit in a div and override the CSS variables.


import { CopilotKitCSSProperties } from "@copilotkit/react-ui";
 
<div
  style={
    {
      "--copilot-kit-primary-color": "#222222",
    } as CopilotKitCSSProperties
  }
>
  <CopilotSidebar .../>
</div>
Reference
CSS Variable	Description
--copilot-kit-primary-color	Main brand/action color - used for buttons, interactive elements
--copilot-kit-contrast-color	Color that contrasts with primary - used for text on primary elements
--copilot-kit-background-color	Main page/container background color
--copilot-kit-secondary-color	Secondary background - used for cards, panels, elevated surfaces
--copilot-kit-secondary-contrast-color	Primary text color for main content
--copilot-kit-separator-color	Border color for dividers and containers
--copilot-kit-muted-color	Muted color for disabled/inactive states
Custom CSS
In addition to customizing the colors, the CopilotKit CSS is structured to easily allow customization via CSS classes.

globals.css

.copilotKitButton {
  border-radius: 0;
}
 
.copilotKitMessages {
  padding: 2rem;
}
 
.copilotKitUserMessage {
  background: #007AFF;
}
Reference
For a full list of styles and classes used in CopilotKit, click here.

CSS Class	Description
.copilotKitMessages	Main container for all chat messages with scroll behavior and spacing
.copilotKitInput	Text input container with typing area and send button
.copilotKitUserMessage	Styling for user messages including background, text color and bubble shape
.copilotKitAssistantMessage	Styling for AI responses including background, text color and bubble shape
.copilotKitHeader	Top bar of chat window containing title and controls
.copilotKitButton	Primary chat toggle button with hover and active states
.copilotKitWindow	Root container defining overall chat window dimensions and position
.copilotKitMarkdown	Styles for rendered markdown content including lists, links and quotes
.copilotKitCodeBlock	Code snippet container with syntax highlighting and copy button
.copilotKitChat	Base chat layout container handling positioning and dimensions
.copilotKitSidebar	Styles for sidebar chat mode including width and animations
.copilotKitPopup	Styles for popup chat mode including position and animations
.copilotKitButtonIcon	Icon styling within the main chat toggle button
.copilotKitButtonIconOpen .copilotKitButtonIconClose	Icon states for when chat is open/closed
.copilotKitCodeBlockToolbar	Top bar of code blocks with language and copy controls
.copilotKitCodeBlockToolbarLanguage	Language label styling in code block toolbar
.copilotKitCodeBlockToolbarButtons	Container for code block action buttons
.copilotKitCodeBlockToolbarButton	Individual button styling in code block toolbar
.copilotKitSidebarContentWrapper	Inner container for sidebar mode content
.copilotKitInputControls	Container for input area buttons and controls
.copilotKitActivityDot1 .copilotKitActivityDot2 .copilotKitActivityDot3	Animated typing indicator dots
.copilotKitDevConsole	Development debugging console container
.copilotKitDevConsoleWarnOutdated	Warning styles for outdated dev console
.copilotKitVersionInfo	Version information display styles
.copilotKitDebugMenuButton	Debug menu toggle button styling
.copilotKitDebugMenu	Debug options menu container
.copilotKitDebugMenuItem	Individual debug menu option styling
Custom Fonts
You can customize the fonts by updating the fontFamily property in the various CSS classes that are used in the CopilotKit.

globals.css

.copilotKitMessages {
  font-family: "Arial, sans-serif";
}
 
.copilotKitInput {
  font-family: "Arial, sans-serif";
}
Reference
You can update the main content classes to change the font family for the various components.

CSS Class	Description
.copilotKitMessages	Main container for all messages
.copilotKitInput	The input field
.copilotKitMessage	Base styling for all chat messages
.copilotKitUserMessage	User messages
.copilotKitAssistantMessage	AI responses
Custom Icons
You can customize the icons by passing the icons property to the CopilotSidebar, CopilotPopup or CopilotChat component.


<CopilotChat
  icons={{
    // Use your own icons here â€“ any React nodes
    openIcon: <YourOpenIconComponent />,
    closeIcon: <YourCloseIconComponent />,
  }}
/>
Reference
Icon	Description
openIcon	The icon to use for the open chat button
closeIcon	The icon to use for the close chat button
headerCloseIcon	The icon to use for the close chat button in the header
sendIcon	The icon to use for the send button
activityIcon	The icon to use for the activity indicator
spinnerIcon	The icon to use for the spinner
stopIcon	The icon to use for the stop button
regenerateIcon	The icon to use for the regenerate button
pushToTalkIcon	The icon to use for push to talk
Custom Labels
To customize labels, pass the labels property to the CopilotSidebar, CopilotPopup or CopilotChat component.


<CopilotChat
  labels={{
    initial: "Hello! How can I help you today?",
    title: "My Copilot",
    placeholder: "Ask me anything!",
    stopGenerating: "Stop",
    regenerateResponse: "Regenerate",
  }} 
/>
Reference
Label	Description
initial	The initial message(s) to display in the chat window
title	The title to display in the header
placeholder	The placeholder to display in the input
stopGenerating	The label to display on the stop button
regenerateResponse	The label to display on the regenerate button

================================================================================================================================================================

Custom Sub-Components
You can swap out any of the sub-components of any Copilot UI to build up a completely custom look and feel. All components are fully typed with TypeScript for better development experience.

Component	Description
UserMessage	Message component for user messages
AssistantMessage	Message component for assistant messages
Window	Contains the chat
Button	Button that opens/closes the chat
Header	The header of the chat
Messages	The chat messages area
Suggestions	Customize how suggestions are displayed
Input	The chat input
Actions	Customize how actions (tools) are displayed
Agent State	Customize how agent state messages are displayed
UserMessage
The user message is what displays when the user sends a message to the chat. In this example, we change the color and add an avatar.

Preview
Code
The main thing to be aware of here is the message prop, which is the message text from the user.


import { UserMessageProps } from "@copilotkit/react-ui";
import { CopilotKit } from "@copilotkit/react-core";
import { CopilotSidebar } from "@copilotkit/react-ui";
import "@copilotkit/react-ui/styles.css";
 
const CustomUserMessage = (props: UserMessageProps) => {
  const wrapperStyles = "flex items-center gap-2 justify-end mb-4";
  const messageStyles = "bg-blue-500 text-white py-2 px-4 rounded-xl break-words flex-shrink-0 max-w-[80%]";
  const avatarStyles = "bg-blue-500 shadow-sm min-h-10 min-w-10 rounded-full text-white flex items-center justify-center";
 
  return (
    <div className={wrapperStyles}>
      <div className={messageStyles}>{props.message}</div>
      <div className={avatarStyles}>TS</div>
    </div>
  );
};
 
<CopilotKit>
  <CopilotSidebar UserMessage={CustomUserMessage} />
</CopilotKit>
AssistantMessage
The assistant message is what displays when the LLM responds to a user message. In this example, we remove the background color and add an avatar.

Preview
Code

Window
The window is the main container for the chat. In this example, we turn it into a more traditional modal.

Preview
Code

import { WindowProps, useChatContext, CopilotSidebar } from "@copilotkit/react-ui";
import { CopilotKit } from "@copilotkit/react-core";
import "@copilotkit/react-ui/styles.css";
function Window({ children }: WindowProps) {
  const { open, setOpen } = useChatContext();
 
  if (!open) return null;
 
  return (
    <div 
      className="fixed inset-0 bg-black/50 flex items-center justify-center p-4"
      onClick={() => setOpen(false)}
    >
      <div 
        className="bg-white rounded-lg shadow-xl max-w-2xl w-full h-[80vh] overflow-auto"
        onClick={e => e.stopPropagation()}
      >
        <div className="flex flex-col h-full">
          {children}
        </div>
      </div>
    </div>
  );
};
 
<CopilotKit>
  <CopilotSidebar Window={Window} />
</CopilotKit>
Button
The CopilotSidebar and CopilotPopup components allow you to customize their trigger button by passing in a custom Button component.

Preview
Code

import { ButtonProps, useChatContext, CopilotSidebar } from "@copilotkit/react-ui";
import { CopilotKit } from "@copilotkit/react-core";
import "@copilotkit/react-ui/styles.css";
function Button({}: ButtonProps) {
  const { open, setOpen } = useChatContext();
 
  const wrapperStyles = "w-24 bg-blue-500 text-white p-4 rounded-lg text-center cursor-pointer";
 
  return (
    <div onClick={() => setOpen(!open)} className={wrapperStyles}>
      <button
        className={`${open ? "open" : ""}`}
        aria-label={open ? "Close Chat" : "Open Chat"}
      >
        Ask AI
      </button>
    </div>
  );
};
 
<CopilotKit>
  <CopilotSidebar Button={Button} />
</CopilotKit>
Header
The header component is the top of the chat window. In this example, we add a button to the left of the title with a custom icon.

Preview
Code

import { HeaderProps, useChatContext, CopilotSidebar } from "@copilotkit/react-ui";
import { BookOpenIcon } from "@heroicons/react/24/outline";
import { CopilotKit } from "@copilotkit/react-core";
import "@copilotkit/react-ui/styles.css";
function Header({}: HeaderProps) {
  const { setOpen, icons, labels } = useChatContext();
 
  return (
    <div className="flex justify-between items-center p-4 bg-blue-500 text-white">
      <div className="w-24">
        <a href="/">
          <BookOpenIcon className="w-6 h-6" />
        </a>
      </div>
      <div className="text-lg">{labels.title}</div>
      <div className="w-24 flex justify-end">
        <button onClick={() => setOpen(false)} aria-label="Close">
          {icons.headerCloseIcon}
        </button>
      </div>
    </div>
  );
};
 
<CopilotKit>
  <CopilotSidebar Header={Header} />
</CopilotKit>
Messages
The Messages component handles the display and organization of different message types in the chat interface. Its complexity comes from managing various message types (text, actions, results, and agent states) and maintaining proper scroll behavior.

Preview
Code

import { MessagesProps, CopilotSidebar } from "@copilotkit/react-ui";
import { useCopilotChat } from "@copilotkit/react-core";
import { CopilotKit } from "@copilotkit/react-core";
import "@copilotkit/react-ui/styles.css";
function CustomMessages({
  messages,
  inProgress,
  RenderMessage,
}: MessagesProps) {
  const wrapperStyles = "p-4 flex flex-col gap-2 h-full overflow-y-auto bg-indigo-300";
 
  /*
    Message types handled:
    - TextMessage: Regular chat messages
  */
  return (
    <div className={wrapperStyles}>
      {messages.map((message, index) => {
        if (message.isTextMessage()) {
          return <RenderMessage 
            key={message.id} 
            message={message} 
            inProgress={inProgress} 
            index={index} 
            isCurrentMessage={index === messages.length - 1}
          />;
        }
      })}
    </div>
  );
}
 
<CopilotKit>
  <CopilotSidebar Messages={CustomMessages} />
</CopilotKit>
Suggestions
The suggestions component allows you to customize how suggestions are displayed. In this example, we add a label to the list and change the suggestion chip look

Preview
Code
The main thing to be aware of here is the message prop, which is the message text from the user.


    import { CopilotKit } from "@copilotkit/react-core";
    import {
        CopilotSidebar,
        CopilotChatSuggestion,
        RenderSuggestion,
        RenderSuggestionsListProps,
    } from "@copilotkit/react-ui";
    import "@copilotkit/react-ui/styles.css";
 
    const CustomSuggestionsList = (props: UserMessageProps) => {
        const wrapperStyles = "flex items-center gap-2 justify-end mb-4";
        const messageStyles = "bg-blue-500 text-white py-2 px-4 rounded-xl break-words flex-shrink-0 max-w-[80%]";
        const avatarStyles = "bg-blue-500 shadow-sm min-h-10 min-w-10 rounded-full text-white flex items-center justify-center";
 
        return (
            <div className="suggestions flex flex-col gap-2 p-4">
                <h1>Try asking:</h1>
                <div className="flex gap-2">
                    {suggestions.map((suggestion: CopilotChatSuggestion, index) => (
                        <RenderSuggestion
                        key={index}
                                  title={suggestion.title}
                                  message={suggestion.message}
                                  partial={suggestion.partial}
                                  className="rounded-md border border-gray-500 bg-white px-2 py-1 shadow-md"
                                  onClick={() => onSuggestionClick(suggestion.message)}
                        />
                    ))}
                </div>
            </div>
        );
    };
 
    <CopilotKit>
        <CopilotSidebar RenderSuggestionsList={CustomSuggestionsList} />
    </CopilotKit>
Input
The input component that the user interacts with to send messages to the chat. In this example, we customize it to have a custom "Ask" button and placeholder text.

Preview
Code

Actions
Actions allow the LLM to interact with your application's functionality. When an action is called by the LLM, you can provide custom components to visualize its execution and results. This example demonstrates a calendar meeting card implementation.

Preview
Code

"use client" // only necessary if you are using Next.js with the App Router.
import { useCopilotAction } from "@copilotkit/react-core"; 
 
export function YourComponent() {
  useCopilotAction({ 
    name: "showCalendarMeeting",
    description: "Displays calendar meeting information",
    parameters: [
      {
        name: "date",
        type: "string",
        description: "Meeting date (YYYY-MM-DD)",
        required: true
      },
      {
        name: "time",
        type: "string",
        description: "Meeting time (HH:mm)",
        required: true
      },
      {
        name: "meetingName",
        type: "string",
        description: "Name of the meeting",
        required: false
      }
    ],
    render: ({ status, args }) => {
      const { date, time, meetingName } = args;
 
      if (status === 'inProgress') {
        return <LoadingView />; // Your own component for loading state
      } else {
        const meetingProps: CalendarMeetingCardProps = {
          date: date,
          time,
          meetingName
        };
        return <CalendarMeetingCardComponent {...meetingProps} />;
      }
    },
  });
 
  return (
    <>...</>
  );
}
Agent State
The Agent State component allows you to visualize the internal state and progress of your CoAgents. When working with CoAgents, you can provide a custom component to render the agent's state. This example demonstrates a progress bar that updates as the agent runs.

Not started with CoAgents yet?

If you haven't gotten started with CoAgents yet, you can get started in 10 minutes with the quickstart guide.

Preview
Code

"use client"; // only necessary if you are using Next.js with the App Router.
 
import { useCoAgentStateRender } from "@copilotkit/react-core";
import { Progress } from "./progress";
 
type AgentState = {
  logs: string[];
}
 
useCoAgentStateRender<AgentState>({
  name: "basic_agent",
  render: ({ state, nodeName, status }) => {
    if (!state.logs || state.logs.length === 0) {
      return null;
    }
 
    // Progress is a component we are omitting from this example for brevity.
    return <Progress logs={state.logs} />; 
  },
});

================================================================================================================================================================

Frontend Actions
Learn how to enable your Copilot to take actions in the frontend.

Let the Copilot Take Action
useCopilotAction
In addition to understanding state, you can empower the copilot to take actions. Use the useCopilotAction hook to define specific tasks that the copilot can perform based on user input.

YourComponent.tsx

"use client" // only necessary if you are using Next.js with the App Router. 
import { useCopilotAction } from "@copilotkit/react-core"; 
 
export function MyComponent() {
  const [todos, setTodos] = useState<string[]>([]);
 
  // Define Copilot action
  useCopilotAction({
    name: "addTodoItem",
    description: "Add a new todo item to the list",
    parameters: [
      {
        name: "todoText",
        type: "string",
        description: "The text of the todo item to add",
        required: true,
      },
    ],
    handler: async ({ todoText }) => {
      setTodos([...todos, todoText]);
    },
  });
 
  return (
    <ul>
      {todos.map((todo, index) => (
        <li key={index}>{todo}</li>
      ))}
    </ul>
  );
}
Changing where/when the action is executed
Specify "use client" (Next.js App Router)
This is only necessary if you are using Next.js with the App Router.

YourComponent.tsx

"use client"
Like other React hooks such as useState and useEffect, this is a client-side hook. If you're using Next.js with the App Router, you'll need to add the "use client" directive at the top of any file using this hook.

Test it out!
After defining the action, ask the copilot to perform the task. For example, you can now ask the copilot to "select an employee" by specifying the employeeId.


================================================================================================================================================================

useCopilotAction
The useCopilotAction hook allows your copilot to take action in the app.



useCopilotAction is a React hook that you can use in your application to provide custom actions that can be called by the AI. Essentially, it allows the Copilot to execute these actions contextually during a chat, based on the userâ€™s interactions and needs.

Here's how it works:

Use useCopilotAction to set up actions that the Copilot can call. To provide more context to the Copilot, you can provide it with a description (for example to explain what the action does, under which conditions it can be called, etc.).

Then you define the parameters of the action, which can be simple, e.g. primitives like strings or numbers, or complex, e.g. objects or arrays.

Finally, you provide a handler function that receives the parameters and returns a result. CopilotKit takes care of automatically inferring the parameter types, so you get type safety and autocompletion for free.

To render a custom UI for the action, you can provide a render() function. This function lets you render a custom component or return a string to display.

Usage
Simple Usage

useCopilotAction({
  name: "sayHello",
  description: "Say hello to someone.",
  parameters: [
    {
      name: "name",
      type: "string",
      description: "name of the person to say greet",
    },
  ],
  handler: async ({ name }) => {
    alert(`Hello, ${name}!`);
  },
});
Generative UI
This hooks enables you to dynamically generate UI elements and render them in the copilot chat. For more information, check out the Generative UI page.

Parameters
action
Action
required
The function made available to the Copilot. See Action.

name
string
required
The name of the action.

handler
(args) => Promise<any>
required
The handler of the action.

description
string
A description of the action. This is used to instruct the Copilot on how to use the action.

available
'enabled' | 'disabled' | 'remote'
Use this property to control when the action is available to the Copilot. When set to "remote", the action is available only for remote agents.

followUp
boolean
Default: "true"
Whether to report the result of a function call to the LLM which will then provide a follow-up response. Pass false to disable

parameters
Parameter[]
The parameters of the action. See Parameter.

name
string
required
The name of the parameter.

type
string
required
The type of the argument. One of:

"string"
"number"
"boolean"
"object"
"object[]"
"string[]"
"number[]"
"boolean[]"
description
string
A description of the argument. This is used to instruct the Copilot on what this argument is used for.

enum
string[]
For string arguments, you can provide an array of possible values.

required
boolean
Whether or not the argument is required. Defaults to true.

attributes
If the argument is of a complex type, i.e. object or object[], this field lets you define the attributes of the object. For example:


{
  name: "addresses",
  description: "The addresses extracted from the text.",
  type: "object[]",
  attributes: [
    {
      name: "street",
      type: "string",
      description: "The street of the address.",
    },
    {
      name: "city",
      type: "string",
      description: "The city of the address.",
    },
    // ...
  ],
}
render
string | (props: ActionRenderProps<T>) => string
Render lets you define a custom component or string to render instead of the default. You can either pass in a string or a function that takes the following props:

status
'inProgress' | 'executing' | 'complete'
"inProgress": arguments are dynamically streamed to the function, allowing you to adjust your UI in real-time.
"executing": The action handler is executing.
"complete": The action handler has completed execution.
args
T
The arguments passed to the action in real time. When the status is "inProgress", they are possibly incomplete.

result
any
The result returned by the action. It is only available when the status is "complete".

renderAndWaitForResponse
(props: ActionRenderPropsWait<T>) => React.ReactElement
This is similar to render, but provides a respond function in the props that you must call with the user's response. The component will remain rendered until respond is called. The response will be passed as the result to the action handler.

status
'inProgress' | 'executing' | 'complete'
"inProgress": arguments are dynamically streamed to the function, allowing you to adjust your UI in real-time.
"executing": The action handler is executing.
"complete": The action handler has completed execution.
args
T
The arguments passed to the action in real time. When the status is "inProgress", they are possibly incomplete.

respond
(result: any) => void
A function that must be called with the user's response. The response will be passed as the result to the action handler. Only available when status is "executing".

result
any
The result returned by the action. It is only available when the status is "complete".

dependencies
any[]
An optional array of dependencies.

================================================================================================================================================================

CopilotKit
The CopilotKit provider component, wrapping your application.

This component will typically wrap your entire application (or a sub-tree of your application where you want to have a copilot). It provides the copilot context to all other components and hooks.

Example
You can find more information about self-hosting CopilotKit here.


import { CopilotKit } from "@copilotkit/react-core";
 
<CopilotKit runtimeUrl="<your-runtime-url>">
  // ... your app ...
</CopilotKit>
Properties
publicApiKey
string
Your Copilot Cloud API key.

Don't have it yet? Go to https://cloud.copilotkit.ai and get one for free.

publicLicenseKey
string
Your public license key for accessing premium CopilotKit features.

Don't have it yet? Go to https://cloud.copilotkit.ai and get one for free.

guardrails_c
{ validTopics?: string[]; invalidTopics?: string[]; }
Restrict input to specific topics using guardrails. @remarks

This feature is only available when using CopilotKit's hosted cloud service. To use this feature, sign up at https://cloud.copilotkit.ai to get your publicApiKey. The feature allows restricting chat conversations to specific topics.

runtimeUrl
string
The endpoint for the Copilot Runtime instance. Click here for more information.

transcribeAudioUrl
string
The endpoint for the Copilot transcribe audio service.

textToSpeechUrl
string
The endpoint for the Copilot text to speech service.

headers
Record<string, string>
Additional headers to be sent with the request.

For example:


{
  "Authorization": "Bearer X"
}
children
ReactNode
required
The children to be rendered within the CopilotKit.

properties
Record<string, any>
Custom properties to be sent with the request. Can include threadMetadata for thread creation and authorization for LangGraph Platform authentication. For example:


{
  'user_id': 'users_id',
  'authorization': 'your-auth-token', // For LangGraph Platform authentication
  threadMetadata: {
    'account_id': '123',
    'user_type': 'premium'
  }
}
Note: The authorization property is automatically forwarded to LangGraph agents. See the LangGraph Agent Authentication Guide for details.

credentials
RequestCredentials
Indicates whether the user agent should send or receive cookies from the other domain in the case of cross-origin requests.

showDevConsole
boolean
Whether to show the dev console.

Set to true to show error banners and toasts, false to hide all error UI. Defaults to false for production safety.

agent
string
The name of the agent to use.

forwardedParameters
Pick<ForwardedParametersInput, 'temperature'>
The forwarded parameters to use for the task.

authConfig_c
{ SignInComponent: React.ComponentType<{ onSignInComplete: (authState: AuthState) => void; }>; }
The auth config to use for the CopilotKit. @remarks

This feature is only available when using CopilotKit's hosted cloud service. To use this feature, sign up at https://cloud.copilotkit.ai to get your publicApiKey. The feature allows restricting chat conversations to specific topics.

threadId
string
The thread id to use for the CopilotKit.

onError
CopilotErrorHandler
Optional error handler for comprehensive debugging and observability.

Requires publicApiKey: Error handling only works when publicApiKey is provided. This is a premium Copilot Cloud feature.

@param errorEvent - Structured error event with rich debugging context

@example


<CopilotKit
  publicApiKey="ck_pub_your_key"
  onError={(errorEvent) => {
    debugDashboard.capture(errorEvent);
  }}
>

================================================================================================================================================================

LLM Adapters
GoogleGenerativeAIAdapter
Copilot Runtime adapter for Google Generative AI (e.g. Gemini).

Copilot Runtime adapter for Google Generative AI (e.g. Gemini).

Example

import { CopilotRuntime, GoogleGenerativeAIAdapter } from "@copilotkit/runtime";
const { GoogleGenerativeAI } = require("@google/generative-ai");
 
const genAI = new GoogleGenerativeAI(process.env["GOOGLE_API_KEY"]);
 
const copilotKit = new CopilotRuntime();
 
return new GoogleGenerativeAIAdapter({ model: "gemini-1.5-pro" });
Constructor Parameters
model
string
A custom Google Generative AI model to use.

apiKey
string
The API key to use.

================================================================================================================================================================