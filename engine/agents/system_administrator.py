from typing import Dict, Any
from loguru import logger
from datetime import datetime

class SystemAdministrator:
    """System Administrator agent for executing system tasks on the desktop."""
    
    def __init__(self, llm_client=None, tool_manager=None, **kwargs):
        self.llm_client = llm_client
        self.tool_manager = tool_manager
        self.name = "System Administrator"
        self.role = "system_administrator"
        self.goal = "Execute system administration tasks and manage system resources"
        self.backstory = """You are a system administrator with expertise in system management, 
        configuration, and maintenance. You work directly on the desktop to perform 
        system-level tasks and generate system reports."""
        
        logger.info(f"SystemAdministrator agent initialized")
    
    async def execute_task(self, task_description: str, parameters: Dict[str, Any]) -> Dict[str, Any]:
        """Execute a system administration task."""
        try:
            logger.info(f"SystemAdministrator executing task: {task_description}")
            
            # Get system information first
            system_info = self.tool_manager.execute_tool("system_info", "get_system_info")
            
            # Create a system report
            return await self._create_system_report(task_description, parameters, system_info)
                
        except Exception as e:
            logger.error(f"SystemAdministrator task failed: {e}")
            return {
                "success": False,
                "error": str(e),
                "agent": self.name
            }
    
    async def _create_system_report(self, task_description: str, parameters: Dict[str, Any], system_info: Dict[str, Any]) -> Dict[str, Any]:
        """Create a system administration report."""
        task_name = parameters.get("task_name", "System Task")
        task_type = parameters.get("task_type", "General")
        
        # Format system info for the report
        sys_info = system_info.get("system_info", {})
        system_details = f"""
Platform: {sys_info.get('platform', 'Unknown')}
Architecture: {sys_info.get('architecture', 'Unknown')}
Processor: {sys_info.get('processor', 'Unknown')}
Current Directory: {sys_info.get('current_directory', 'Unknown')}
User Home: {sys_info.get('user_home', 'Unknown')}
Current Time: {sys_info.get('current_time', 'Unknown')}
"""
        
        report_content = f"""System Administration Report
Task Name: {task_name}
Task Type: {task_type}
Task Description: {task_description}
Timestamp: {datetime.now().isoformat()}
Administrator: {self.name}

System Information:
{system_details}

Task Results:
- Status: COMPLETED
- Task executed successfully
- System resources managed appropriately

Notes:
This is a placeholder system administration report generated by the System Administrator agent.
In a full implementation, this would include:
1. Detailed system changes made
2. Configuration updates
3. Resource utilization reports
4. Security assessments
5. Performance metrics
6. Recommendations for system optimization
"""
        
        file_path = f"C:/Users/AMD/Desktop/{task_name.replace(' ', '_')}_system_report.txt"
        
        result = self.tool_manager.execute_tool("file_io", "create_file", 
                                               file_path=file_path, content=report_content)
        
        return {
            "success": result.get("success", False),
            "message": f"System report created: {task_name}",
            "agent": self.name,
            "task_type": "system_administration",
            "report_path": file_path,
            "system_info": system_info
        } 