# 🛰️ SENTINEL SYSTEM: FULL ARCHITECTURE & DIRECTORY OVERVIEW

---

## 1. 📦 Directory Structure (As of August 2025)

```
sentinel/
│
├── AirCodum/                  # (Custom/3rd-party code or data, not core)
├── db/                        # Local database files and vector DBs
│   ├── sentinel_missions.db
│   └── chroma_memory/
│       ├── chroma.sqlite3
│       └── ...                # ChromaDB vector storage
├── desktop-app/               # 🚀 Main application (Flask backend + SPA frontend)
│   ├── config/                # Python config modules
│   ├── db/                    # (Legacy or app-specific DB files)
│   ├── logs/                  # Application logs
│   ├── scripts/               # Utility and management scripts
│   ├── src/                   # Python backend (Flask app, API, models, core logic)
│   │   ├── agents/            # Agent logic and orchestration
│   │   ├── api/               # REST API endpoints (missions, events, etc.)
│   │   ├── core/              # Core business logic, services, and managers
│   │   ├── models/            # SQLAlchemy ORM models (Mission, Event, etc.)
│   │   ├── tools/             # Utility modules and helpers
│   │   ├── utils/             # General utilities (logging, config, etc.)
│   │   ├── main.py            # Flask app entry point
│   │   └── ...                # Other backend logic
│   ├── static/                # Frontend static assets
│   │   ├── css/
│   │   │   ├── sentinel-dash.css   # Main dashboard and modal styling
│   │   │   └── ...            # Other CSS files
│   │   ├── js/
│   │   │   └── unified-realtime.js # Main JS controller (Alpine.js, real-time, modal logic)
│   │   ├── fonts/
│   │   ├── images/
│   │   └── ...                # Other static assets
│   ├── templates/             # Jinja2 HTML templates (SPA shell, modals, dashboard)
│   │   ├── index.html         # Main SPA entry
│   │   ├── missions.html      # Missions dashboard & modal (core UI)
│   │   ├── analytics.html     # Analytics/observability UI
│   │   └── ...                # Other UI pages
│   ├── tests/                 # Python test suite (unit/integration)
│   ├── requirements.txt       # Python dependencies
│   ├── requirements_sentry.txt# Sentry/observability dependencies
│   ├── pyproject.toml         # Python project config
│   ├── setup.cfg              # Linting/formatting config
│   ├── start_servers.ps1      # Windows server startup script
│   ├── start_cognitive_forge.py # Main orchestrator script
│   └── ...                    # Other app-level scripts and docs
├── logs/                      # Top-level logs (may be symlinked)
├── wandb/                     # Weights & Biases experiment logs
├── workspace/                 # User workspace, temp files, or agent outputs
└── ...                        # Other top-level folders (docs, configs, etc.)
```

---

## 2. 🧠 System Logic & Data Flow

### 2.1. **Frontend (desktop-app/static & templates)**

```
[ index.html ]
     │
     ▼
[ unified-realtime.js (Alpine.js SPA Controller) ]
     │
     ├── [ missions.html ] (Mission queue, modal, event feed)
     ├── [ analytics.html ] (Observability dashboard)
     └── [ sentinel-dash.css ] (Styling)
```

- **SPA Shell**: Loads all JS/CSS, bootstraps Alpine.js app.
- **Missions UI**: Displays mission queue, mission modals, and real-time event feeds.
- **JS Controller**: Manages all mission modal logic, event streaming, state, and Alpine.js reactivity.
- **Styling**: Provides all dashboard, modal, and event feed styles.

### 2.2. **Backend (desktop-app/src)**

```
[ main.py (Flask App Entrypoint) ]
     │
     ├── [ api/ ] (REST endpoints)
     ├── [ models/ ] (SQLAlchemy ORM)
     ├── [ core/ ] (Business logic, managers)
     ├── [ agents/ ] (LLM/Hybrid agent logic)
     ├── [ tools/, utils/ ] (Helpers)
     └── ...
```

- **Entry Point**: Starts Flask app, loads config, registers blueprints.
- **API Layer**: Exposes REST endpoints for missions, events, analytics, etc.
- **Models**: Defines SQLAlchemy ORM models for Mission, Event, User, etc.
- **Core Logic**: Contains business logic, mission orchestration, and service managers.
- **Agents**: Implements agent logic, LLM orchestration, and hybrid decision engine.
- **Tools/Utils**: Helper modules for logging, config, and utility functions.

### 2.3. **Database & Vector DB**

```
[ PostgreSQL (DATABASE_URL) ]
     │
     └── [ SQLAlchemy ORM Models ]

[ ChromaDB / Pinecone (VECTOR_DB_URL) ]
     │
     └── [ Vector memory for agents, analytics ]
```

- **Relational DB**: PostgreSQL stores missions, events, users, etc.
- **Vector DB**: ChromaDB (or Pinecone) for memory/embedding storage, used by agents and analytics.

### 2.4. **Observability & Analytics**

```
[ Sentry ] <── Error tracking
[ Weave ] <── Real-time observability
[ WandB ] <── Experiment tracking
```

- **Sentry**: Error tracking and reporting (SENTRY_DSN, SENTRY_AUTH_TOKEN)
- **Weave & WandB**: Real-time observability, experiment tracking, and analytics
- **Advanced Analytics**: Enabled via `.env` flags, surfaced in analytics.html and modals.

### 2.5. **Configuration & Security**

- **.env**: Central config for all services (AI keys, DB, observability, cache, security)
- **Security**: Shell command execution is sandboxed/limited by config.

---

## 3. 🖼️ Visual System Map

```
+-------------------+         +-------------------+         +-------------------+
|   Frontend (SPA)  | <─────► |   Flask Backend   | <─────► |   PostgreSQL DB   |
|  (Alpine.js/JS)   |   API   |   (Python)        |   ORM   |   (Relational)    |
+-------------------+         +-------------------+         +-------------------+
         │                            │                             │
         │                            │                             │
         ▼                            ▼                             ▼
+-------------------+         +-------------------+         +-------------------+
|  ChromaDB/Pinecone| <─────► |  Agents/LLMs      | <─────► |  Observability    |
|  (Vector Memory)  |   API   |  (Hybrid Engine)  |   Logs  |  (Sentry/Weave)   |
+-------------------+         +-------------------+         +-------------------+
```

---

## 4. 🔍 Component Breakdown

### 4.1. **Frontend Components**
- **index.html**: SPA entry, loads all scripts/styles
- **missions.html**: Mission queue, modal, event feed, analytics tabs
- **analytics.html**: System analytics, observability dashboard
- **unified-realtime.js**: Alpine.js SPA controller, manages:
  - Mission modal open/close
  - Real-time event feed (WebSocket/REST)
  - Event limiting (10 recent + View All)
  - State management, auto-refresh, error handling
- **sentinel-dash.css**: All dashboard, modal, and event feed styles

### 4.2. **Backend Components**
- **main.py**: Flask app entry, config loader, blueprint registration
- **api/**: REST endpoints for missions, events, analytics
- **models/**: SQLAlchemy ORM models (Mission, Event, User, etc.)
- **core/**: Business logic, mission orchestration, service managers
- **agents/**: LLM/hybrid agent logic, decision engine
- **tools/**, **utils/**: Logging, config, helpers

### 4.3. **Database & Observability**
- **PostgreSQL**: Main relational DB for missions, events, users
- **ChromaDB/Pinecone**: Vector DB for agent memory, analytics
- **Sentry**: Error tracking
- **Weave/WandB**: Real-time observability, experiment tracking

### 4.4. **Configuration & Security**
- **.env**: All environment variables (AI keys, DB, observability, cache, security)
- **Security**: Shell command execution is sandboxed/limited by config

---

## 5. 🛠️ Key Workflows

### 5.1. **Mission Lifecycle**
1. User creates mission (UI form)
2. Mission sent to Flask API (`/api/missions`)
3. Mission stored in PostgreSQL (SQLAlchemy)
4. Agent picks up mission, processes via LLM/Hybrid engine
5. Events generated, streamed to frontend (WebSocket/REST)
6. User views mission modal, sees real-time updates
7. Mission completion triggers analytics, observability logging

### 5.2. **Event Feed Logic**
- Events are sorted by timestamp (newest first)
- Only 10 most recent events shown by default
- "View All" button expands to show all events
- Real-time updates via polling or WebSocket

### 5.3. **Observability & Analytics**
- Errors sent to Sentry
- Metrics and traces sent to Weave/WandB
- Analytics tab in modal shows live system health

---

## 6. 📝 Summary Table

| Layer      | Technology         | Key Files/Dirs                | Purpose/Notes                       |
|------------|--------------------|-------------------------------|-------------------------------------|
| Frontend   | Alpine.js, Bootstrap| static/js, static/css, templates | SPA, modals, real-time UI           |
| Backend    | Flask, SQLAlchemy  | src/, api/, models/, core/    | API, business logic, orchestration  |
| Database   | PostgreSQL         | db/, models/                  | Relational data store               |
| Vector DB  | ChromaDB/Pinecone  | db/chroma_memory/             | Agent memory, analytics             |
| Observability | Sentry, Weave, WandB | .env, analytics.html      | Error tracking, analytics           |
| Config     | .env, config/      | .env, config/                 | Centralized configuration           |
| Security   | Python, .env       | .env, src/tools/              | Shell command sandboxing            |

---

## 7. 📚 Additional Notes
- All configuration is managed via `.env` for easy environment switching.
- The system is designed for extensibility: new agents, analytics, or UI modules can be added with minimal friction.
- Observability is a first-class concern: all errors, metrics, and traces are logged and visualized.
- The hybrid agent engine can switch between LLMs and memory DBs based on config and runtime thresholds.
- Security is enforced at the API and shell command level.

---

# END OF OVERVIEW

This document provides a full, visual, and detailed breakdown of the Sentinel system, its directory structure, logic, and all major components. For further architectural diagrams or deep dives into any module, please request a focused breakdown.
